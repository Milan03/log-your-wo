{"version":3,"sources":["src/app/core/wrapper/wrapper.js","src/app/core/preloader/preloader.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA,KAAK,OAAO;AACZ;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,qBAAqB,qBAAqB;AAC5D;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,6CAA6C;AACxF;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,wBAAwB;AACxB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gDAAgD,GAAG;AACnD;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,CAAC,G;CCnbD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,CAAC","file":"scripts.js","sourcesContent":["/**\r\n * This library was created to emulate some jQuery features\r\n * used in this template only with Javascript and DOM\r\n * manipulation functions (IE10+).\r\n * All methods were designed for an adequate and specific use\r\n * and don't perform a deep validation on the arguments provided.\r\n *\r\n * IMPORTANT:\r\n * ==========\r\n * It's suggested NOT to use this library extensively unless you\r\n * understand what each method does. Instead, use only JS or\r\n * you might even need jQuery.\r\n */\r\n\r\n(function(global, factory) {\r\n    if (typeof exports === 'object') { // CommonJS-like\r\n        module.exports = factory();\r\n    } else { // Browser\r\n        if (typeof global.jQuery === 'undefined')\r\n            global.$ = factory();\r\n    }\r\n}(this, function() {\r\n\r\n    // HELPERS\r\n    function arrayFrom(obj) {\r\n        return ('length' in obj) && (obj !== window) ? [].slice.call(obj) : [obj];\r\n    }\r\n\r\n    function filter(ctx, fn) {\r\n        return [].filter.call(ctx, fn);\r\n    }\r\n\r\n    function map(ctx, fn) {\r\n        return [].map.call(ctx, fn);\r\n    }\r\n\r\n    function matches(item, selector) {\r\n        return (Element.prototype.matches || Element.prototype.msMatchesSelector).call(item, selector)\r\n    }\r\n\r\n    // Events handler with simple scoped events support\r\n    var EventHandler = function() {\r\n        this.events = {};\r\n    }\r\n    EventHandler.prototype = {\r\n        // event accepts: 'click' or 'click.scope'\r\n        bind: function(event, listener, target) {\r\n            var type = event.split('.')[0];\r\n            target.addEventListener(type, listener, false);\r\n            this.events[event] = {\r\n                type: type,\r\n                listener: listener\r\n            }\r\n        },\r\n        unbind: function(event, target) {\r\n            if (event in this.events) {\r\n                target.removeEventListener(this.events[event].type, this.events[event].listener, false);\r\n                delete this.events[event];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Object Definition\r\n    var Wrap = function(selector) {\r\n        this.selector = selector;\r\n        return this._setup([]);\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    Wrap.Constructor = function(param, attrs) {\r\n        var el = new Wrap(param);\r\n        return el.init(attrs);\r\n    };\r\n\r\n    // Core methods\r\n    Wrap.prototype = {\r\n        constructor: Wrap,\r\n        /**\r\n         * Initialize the object depending on param type\r\n         * [attrs] only to handle $(htmlString, {attributes})\r\n         */\r\n        init: function(attrs) {\r\n            // empty object\r\n            if (!this.selector) return this;\r\n            // selector === string\r\n            if (typeof this.selector === 'string') {\r\n                // if looks like markup, try to create an element\r\n                if (this.selector[0] === '<') {\r\n                    var elem = this._setup([this._create(this.selector)])\r\n                    return attrs ? elem.attr(attrs) : elem;\r\n                } else\r\n                    return this._setup(arrayFrom(document.querySelectorAll(this.selector)))\r\n            }\r\n            // selector === DOMElement\r\n            if (this.selector.nodeType)\r\n                return this._setup([this.selector])\r\n            else // shorthand for DOMReady\r\n                if (typeof this.selector === 'function')\r\n                    return this._setup([document]).ready(this.selector)\r\n            // Array like objects (e.g. NodeList/HTMLCollection)\r\n            return this._setup(arrayFrom(this.selector))\r\n        },\r\n        /**\r\n         * Creates a DOM element from a string\r\n         * Strictly supports the form: '<tag>' or '<tag/>'\r\n         */\r\n        _create: function(str) {\r\n            var nodeName = str.substr(str.indexOf('<') + 1, str.indexOf('>') - 1).replace('/', '')\r\n            return document.createElement(nodeName);\r\n        },\r\n        /** setup properties and array to element set */\r\n        _setup: function(elements) {\r\n            var i = 0;\r\n            for (; i < elements.length; i++) delete this[i]; // clean up old set\r\n            this.elements = elements;\r\n            this.length = elements.length;\r\n            for (i = 0; i < elements.length; i++) this[i] = elements[i] // new set\r\n            return this;\r\n        },\r\n        _first: function(cb, ret) {\r\n            var f = this.elements[0];\r\n            return f ? (cb ? cb.call(this, f) : f) : ret;\r\n        },\r\n        /** Common function for class manipulation  */\r\n        _classes: function(method, classname) {\r\n            var cls = classname.split(' ');\r\n            if (cls.length > 1) {\r\n                cls.forEach(this._classes.bind(this, method))\r\n            } else {\r\n                if (method === 'contains') {\r\n                    var elem = this._first();\r\n                    return elem ? elem.classList.contains(classname) : false;\r\n                }\r\n                return (classname === '') ? this : this.each(function(i, item) {\r\n                    item.classList[method](classname);\r\n                })\r\n            }\r\n        },\r\n        /**\r\n         * Multi purpose function to set or get a (key, value)\r\n         * If no value, works as a getter for the given key\r\n         * key can be an object in the form {key: value, ...}\r\n         */\r\n        _access: function(key, value, fn) {\r\n            if (typeof key === 'object') {\r\n                for (var k in key) {\r\n                    this._access(k, key[k], fn);\r\n                }\r\n            } else if (value === undefined) {\r\n                return this._first(function(elem) {\r\n                    return fn(elem, key);\r\n                });\r\n            }\r\n            return this.each(function(i, item) {\r\n                fn(item, key, value);\r\n            });\r\n        },\r\n        each: function(fn, arr) {\r\n            arr = arr ? arr : this.elements;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (fn.call(arr[i], i, arr[i]) === false)\r\n                    break;\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /** Allows to extend with new methods */\r\n    Wrap.extend = function(methods) {\r\n        Object.keys(methods).forEach(function(m) {\r\n            Wrap.prototype[m] = methods[m]\r\n        })\r\n    }\r\n\r\n    // DOM READY\r\n    Wrap.extend({\r\n        ready: function(fn) {\r\n            if (document.attachEvent ? document.readyState === 'complete' : document.readyState !== 'loading') {\r\n                fn();\r\n            } else {\r\n                document.addEventListener('DOMContentLoaded', fn);\r\n            }\r\n            return this;\r\n        }\r\n    })\r\n    // ACCESS\r\n    Wrap.extend({\r\n        /** Get or set a css value */\r\n        css: function(key, value) {\r\n            var getStyle = function(e, k) { return e.style[k] || getComputedStyle(e)[k]; };\r\n            return this._access(key, value, function(item, k, val) {\r\n                var unit = (typeof val === 'number') ? 'px' : '';\r\n                return val === undefined ? getStyle(item, k) : (item.style[k] = val + unit);\r\n            })\r\n        },\r\n        /** Get an attribute or set it */\r\n        attr: function(key, value) {\r\n            return this._access(key, value, function(item, k, val) {\r\n                return val === undefined ? item.getAttribute(k) : item.setAttribute(k, val)\r\n            })\r\n        },\r\n        /** Get a property or set it */\r\n        prop: function(key, value) {\r\n            return this._access(key, value, function(item, k, val) {\r\n                return val === undefined ? item[k] : (item[k] = val);\r\n            })\r\n        },\r\n        position: function() {\r\n            return this._first(function(elem) {\r\n                return { left: elem.offsetLeft, top: elem.offsetTop }\r\n            });\r\n        },\r\n        scrollTop: function(value) {\r\n            return this._access('scrollTop', value, function(item, k, val) {\r\n                return val === undefined ? item[k] : (item[k] = val);\r\n            })\r\n        },\r\n        outerHeight: function(includeMargin) {\r\n            return this._first(function(elem) {\r\n                var style = getComputedStyle(elem);\r\n                var margins = includeMargin ? (parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10)) : 0;\r\n                return elem.offsetHeight + margins;\r\n            });\r\n        },\r\n        /**\r\n         * Find the position of the first element in the set\r\n         * relative to its sibling elements.\r\n         */\r\n        index: function() {\r\n            return this._first(function(el) {\r\n                return arrayFrom(el.parentNode.children).indexOf(el)\r\n            }, -1);\r\n        }\r\n    })\r\n    // LOOKUP\r\n    Wrap.extend({\r\n        children: function(selector) {\r\n            var childs = [];\r\n            this.each(function(i, item) {\r\n                childs = childs.concat(map(item.children, function(item) {\r\n                    return item\r\n                }))\r\n            })\r\n            return Wrap.Constructor(childs).filter(selector);\r\n        },\r\n        siblings: function() {\r\n            var sibs = []\r\n            this.each(function(i, item) {\r\n                sibs = sibs.concat(filter(item.parentNode.children, function(child) {\r\n                    return child !== item;\r\n                }))\r\n            })\r\n            return Wrap.Constructor(sibs)\r\n        },\r\n        /** Return the parent of each element in the current set */\r\n        parent: function() {\r\n            var par = map(this.elements, function(item) {\r\n                return item.parentNode;\r\n            })\r\n            return Wrap.Constructor(par)\r\n        },\r\n        /** Return ALL parents of each element in the current set */\r\n        parents: function(selector) {\r\n            var par = [];\r\n            this.each(function(i, item) {\r\n                for (var p = item.parentElement; p; p = p.parentElement)\r\n                    par.push(p);\r\n            })\r\n            return Wrap.Constructor(par).filter(selector)\r\n        },\r\n        /**\r\n         * Get the descendants of each element in the set, filtered by a selector\r\n         * Selector can't start with \">\" (:scope not supported on IE).\r\n         */\r\n        find: function(selector) {\r\n            var found = []\r\n            this.each(function(i, item) {\r\n                found = found.concat(map(item.querySelectorAll( /*':scope ' + */ selector), function(fitem) {\r\n                    return fitem\r\n                }))\r\n            })\r\n            return Wrap.Constructor(found)\r\n        },\r\n        /** filter the actual set based on given selector */\r\n        filter: function(selector) {\r\n            if (!selector) return this;\r\n            var res = filter(this.elements, function(item) {\r\n                return matches(item, selector)\r\n            })\r\n            return Wrap.Constructor(res)\r\n        },\r\n        /** Works only with a string selector */\r\n        is: function(selector) {\r\n            var found = false;\r\n            this.each(function(i, item) {\r\n                return !(found = matches(item, selector))\r\n            })\r\n            return found;\r\n        }\r\n    });\r\n    // ELEMENTS\r\n    Wrap.extend({\r\n        /**\r\n         * append current set to given node\r\n         * expects a dom node or set\r\n         * if element is a set, prepends only the first\r\n         */\r\n        appendTo: function(elem) {\r\n            elem = elem.nodeType ? elem : elem._first()\r\n            return this.each(function(i, item) {\r\n                elem.appendChild(item);\r\n            })\r\n        },\r\n        /**\r\n         * Append a domNode to each element in the set\r\n         * if element is a set, append only the first\r\n         */\r\n        append: function(elem) {\r\n            elem = elem.nodeType ? elem : elem._first()\r\n            return this.each(function(i, item) {\r\n                item.appendChild(elem);\r\n            })\r\n        },\r\n        /**\r\n         * Insert the current set of elements after the element\r\n         * that matches the given selector in param\r\n         */\r\n        insertAfter: function(selector) {\r\n            var target = document.querySelector(selector);\r\n            return this.each(function(i, item) {\r\n                target.parentNode.insertBefore(item, target.nextSibling);\r\n            })\r\n        },\r\n        /**\r\n         * Clones all element in the set\r\n         * returns a new set with the cloned elements\r\n         */\r\n        clone: function() {\r\n            var clones = map(this.elements, function(item) {\r\n                return item.cloneNode(true)\r\n            })\r\n            return Wrap.Constructor(clones);\r\n        },\r\n        /** Remove all node in the set from DOM. */\r\n        remove: function() {\r\n            this.each(function(i, item) {\r\n                delete item.events;\r\n                delete item.data;\r\n                if (item.parentNode) item.parentNode.removeChild(item);\r\n            })\r\n            this._setup([])\r\n        }\r\n    })\r\n    // DATASETS\r\n    Wrap.extend({\r\n        /**\r\n         * Expected key in camelCase format\r\n         * if value provided save data into element set\r\n         * if not, return data for the first element\r\n         */\r\n        data: function(key, value) {\r\n            var hasJSON = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\r\n                dataAttr = 'data-' + key.replace(/[A-Z]/g, '-$&').toLowerCase();\r\n            if (value === undefined) {\r\n                return this._first(function(el) {\r\n                    if (el.data && el.data[key])\r\n                        return el.data[key];\r\n                    else {\r\n                        var data = el.getAttribute(dataAttr)\r\n                        if (data === 'true') return true;\r\n                        if (data === 'false') return false;\r\n                        if (data === +data + '') return +data;\r\n                        if (hasJSON.test(data)) return JSON.parse(data);\r\n                        return data;\r\n                    }\r\n                });\r\n            } else {\r\n                return this.each(function(i, item) {\r\n                    item.data = item.data || {};\r\n                    item.data[key] = value;\r\n                });\r\n            }\r\n        }\r\n    })\r\n    // EVENTS\r\n    Wrap.extend({\r\n        trigger: function(type) {\r\n            type = type.split('.')[0]; // ignore namespace\r\n            var event = document.createEvent('HTMLEvents');\r\n            event.initEvent(type, true, false);\r\n            return this.each(function(i, item) {\r\n                item.dispatchEvent(event);\r\n            })\r\n        },\r\n        blur: function() {\r\n            return this.trigger('blur')\r\n        },\r\n        focus: function() {\r\n            return this.trigger('focus')\r\n        },\r\n        on: function(event, callback) {\r\n            return this.each(function(i, item) {\r\n                if (!item.events) item.events = new EventHandler();\r\n                event.split(' ').forEach(function(ev) {\r\n                    item.events.bind(ev, callback, item);\r\n                })\r\n            })\r\n        },\r\n        off: function(event) {\r\n            return this.each(function(i, item) {\r\n                if (item.events) {\r\n                    item.events.unbind(event, item);\r\n                    delete item.events;\r\n                }\r\n            })\r\n        }\r\n    })\r\n    // CLASSES\r\n    Wrap.extend({\r\n        toggleClass: function(classname) {\r\n            return this._classes('toggle', classname);\r\n        },\r\n        addClass: function(classname) {\r\n            return this._classes('add', classname);\r\n        },\r\n        removeClass: function(classname) {\r\n            return this._classes('remove', classname);\r\n        },\r\n        hasClass: function(classname) {\r\n            return this._classes('contains', classname);\r\n        }\r\n    })\r\n\r\n    return Wrap.Constructor\r\n\r\n}));","(function(global) {\r\n\r\n    var counter = 0, timeout;\r\n    var preloader = document.querySelector('.preloader');\r\n    var progressBar = document.querySelector('.preloader-progress-bar');\r\n    var body = document.querySelector('body');\r\n\r\n    // if preloader not present => abort\r\n    if (!preloader) return;\r\n\r\n    // disables scrollbar\r\n    body.style.overflow = 'hidden';\r\n\r\n    timeout = setTimeout(startCounter, 20);\r\n\r\n    // main.ts call this function once the app is boostrapped\r\n    global.appBootstrap = function() {\r\n        setTimeout(endCounter, 1000);\r\n    };\r\n\r\n    function startCounter() {\r\n        var remaining = 100 - counter;\r\n        counter = counter + (0.015 * Math.pow(1 - Math.sqrt(remaining), 2));\r\n\r\n        if (progressBar) progressBar.style.width = Math.round(counter) + '%';\r\n\r\n        timeout = setTimeout(startCounter, 20);\r\n    }\r\n\r\n    function endCounter() {\r\n\r\n        clearTimeout(timeout);\r\n\r\n        if (progressBar) progressBar.style.width = '100%';\r\n\r\n        setTimeout(function() {\r\n            // animate preloader hiding\r\n            removePreloader();\r\n            // retore scrollbar\r\n            body.style.overflow = '';\r\n        }, 300);\r\n    }\r\n\r\n    function removePreloader() {\r\n        preloader.addEventListener('transitionend', function() {\r\n            preloader.className = 'preloader-hidden';\r\n        });\r\n        preloader.className += ' preloader-hidden-add preloader-hidden-add-active';\r\n    };\r\n\r\n})(window);\r\n"],"sourceRoot":"webpack:///"}